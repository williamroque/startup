// define KanjiCanvas as a global
// call KanjiCanvas.init(id) to initialize a canvas as a KanjiCanvas
// `id` must be the id attribute of the canvas.
// ex: KanjiCanvas.init('canvas-1');
const KanjiCanvas = new Object();

KanjiCanvas.refPatterns = [
	["鳥", 10, [[[112.76796188146558, -22.713533233533383], [102.80770574181699, -4.785072182165919], [90.85539837423869, 7.16723518541238], [80.89514223459011, 17.12749132506096]], [[54.99847627150379, 31.07184992056898], [54.99847627150379, 52.98441342779586], [53.00642504357407, 70.91287447916332], [53.00642504357407, 90.83338675846048], [54.99847627150379, 110.75389903775765], [56.99052749943351, 130.67441131705482], [56.99052749943351, 150.59492359635198], [56.99052749943351, 170.51543587564913], [68.94283486701181, 178.48364078736802], [88.86334714630897, 178.48364078736802], [106.79180819767643, 176.4915895594383], [126.71232047697359, 176.4915895594383], [146.63283275627074, 174.49953833150857], [166.55334503556793, 174.49953833150857], [186.47385731486509, 174.49953833150857], [208.386420822092, 174.49953833150857], [226.31488187345943, 176.4915895594383], [246.23539415275658, 178.48364078736802], [244.24334292482686, 198.40415306666517], [240.25924046896745, 216.33261411803264], [236.275138013108, 234.2610751694001], [232.2910355572486, 252.18953622076754], [228.30693310138915, 272.1100485000647], [218.34667696174054, 282.0703046397133]], [[56.99052749943351, 25.09569623677983], [78.90309100666039, 25.09569623677983], [98.82360328595756, 25.09569623677983], [116.75206433732501, 23.10364500885011], [136.67257661662217, 23.10364500885011], [158.58514012384907, 23.10364500885011], [176.5136011752165, 23.10364500885011], [178.50565240314623, 43.02415728814728], [174.5215499472868, 58.96056711158501], [174.5215499472868, 78.88107939088218]], [[56.99052749943351, 60.95261833951473], [78.90309100666039, 58.96056711158501], [96.83155205802784, 58.96056711158501], [116.75206433732501, 58.96056711158501], [138.6646278445519, 56.9685158836553], [156.59308889591935, 56.9685158836553]], [[58.98257872736322, 94.81748921431992], [80.89514223459011, 94.81748921431992], [98.82360328595756, 92.8254379863902], [120.73616679318444, 92.8254379863902], [138.6646278445519, 92.8254379863902], [158.58514012384907, 92.8254379863902]], [[58.98257872736322, 134.65851377291423], [78.90309100666039, 130.67441131705482], [98.82360328595756, 130.67441131705482], [116.75206433732501, 130.67441131705482], [136.67257661662217, 130.67441131705482], [158.58514012384907, 130.67441131705482], [176.5136011752165, 128.6823600891251], [196.43411345451366, 126.69030886119538], [216.35462573381085, 126.69030886119538]], [[15.157451712909463, 222.30876780182177], [11.17334925705002, 242.22928008111893], [9.181298029120313, 260.1577411324864], [5.197195573260871, 276.09415095592414]], [[58.98257872736322, 220.31671657389205], [68.94283486701181, 236.2531263973298], [80.89514223459011, 248.2054337649081]], [[104.79975696974671, 204.38030675045434], [114.76001310939529, 222.30876780182177], [124.72026924904388, 232.26902394147038]], [[154.60103766798963, 190.43594815494632], [168.54539626349765, 206.37235797838406], [180.49770363107595, 220.31671657389205]]]],
	["橋", 16, [[[-4.635464432369247, 79.86810262087005], [17.018399413049167, 79.86810262087005], [35.34089958994167, 78.20242078660709], [55.32908160109713, 76.53673895234414], [73.65158177798965, 78.20242078660709], [91.97408195488215, 78.20242078660709]], [[48.66635426404531, 16.572192918877747], [48.66635426404531, 38.226056764296175], [50.332036098308265, 58.21423877545163], [50.332036098308265, 76.53673895234414], [51.99771793257122, 96.5249209634996], [53.663399766834175, 116.51310297465506], [51.99771793257122, 136.5012849858105], [51.99771793257122, 154.82378516270302], [50.332036098308265, 176.47764900812143], [50.332036098308265, 196.4658310192769], [50.332036098308265, 214.7883311961694], [50.332036098308265, 234.77651320732485]], [[48.66635426404531, 86.53082995792187], [43.669308761256445, 108.18469380334028], [38.67226325846758, 124.84151214596983], [30.343854087152806, 141.49833048859938], [20.349763081575077, 156.48946699696597], [8.689990241734392, 171.48060350533257], [2.0272629046825728, 184.8060581794362]], [[55.32908160109713, 98.19060279776255], [66.98885444093783, 116.51310297465506], [75.3172636122526, 129.8385576487587]], [[188.58362834213352, 4.912420079037062], [171.92680999950397, 14.906511084614792], [155.26999165687442, 23.234920255929566], [136.94749147998192, 29.8976475929814], [120.29067313735239, 33.22901126150731], [106.96521846324875, 36.56037493003322]], [[98.63680929193397, 64.87696611250345], [118.62499130308943, 63.2112842782405], [138.61317331424488, 61.54560244397754], [158.60135532540033, 61.54560244397754], [176.92385550229284, 59.87992060971459], [196.9120375134483, 59.87992060971459], [216.90021952460376, 61.54560244397754]], [[158.60135532540033, 34.894693095770265], [151.93862798834851, 53.21719327266277], [141.94453698277079, 71.53969344955527], [133.616127811456, 86.53082995792187], [121.95635497161534, 104.85333013481437], [111.96226396603761, 114.8474211403921]], [[168.59544633097806, 64.87696611250345], [185.2522646736076, 78.20242078660709], [198.57771934771125, 89.86219362644778], [213.56885585607785, 98.19060279776255], [228.55999236444444, 108.18469380334028]], [[133.616127811456, 103.18764830055142], [133.616127811456, 124.84151214596983]], [[130.2847641429301, 103.18764830055142], [151.93862798834851, 101.52196646628846], [170.26112816524102, 103.18764830055142], [188.58362834213352, 104.85333013481437], [188.58362834213352, 124.84151214596983]], [[136.94749147998192, 136.5012849858105], [158.60135532540033, 136.5012849858105], [178.5895373365558, 136.5012849858105]], [[103.63385479472284, 169.8149216710696], [101.96817296045988, 189.80310368222507], [101.96817296045988, 209.79128569338053], [101.96817296045988, 229.779467704536], [101.96817296045988, 246.43628604716557]], [[103.63385479472284, 164.81787616828075], [126.9534004744042, 164.81787616828075], [145.2759006512967, 164.81787616828075], [165.26408266245215, 164.81787616828075], [186.91794650787057, 164.81787616828075], [205.24044668476307, 163.1521943340178], [225.22862869591853, 163.1521943340178], [231.89135603297035, 173.14628533959552], [231.89135603297035, 196.4658310192769], [228.55999236444444, 213.12264936190644], [228.55999236444444, 231.44514953879894], [226.89431053018149, 249.76764971569148], [211.9031740218149, 244.7706042129026]], [[136.94749147998192, 186.47174001369916], [136.94749147998192, 208.12560385911758]], [[135.28180964571897, 181.4746945109103], [156.93567349113738, 181.4746945109103], [176.92385550229284, 181.4746945109103], [183.58658283934466, 194.80014918501394], [183.58658283934466, 209.79128569338053]], [[145.2759006512967, 219.78537669895826], [165.26408266245215, 218.1196948646953], [185.2522646736076, 216.45401303043235]]]],
	["車", 7, [[[20.713449205775376, 27.264334692812284], [42.87194949109882, 27.264334692812284], [62.81459974788993, 27.264334692812284], [84.97310003321338, 27.264334692812284], [100.4840502329398, 25.04848466427994], [120.4267004897309, 25.04848466427994], [140.369350746522, 22.832634635747596], [160.31200100331313, 22.832634635747596], [182.47050128863657, 22.832634635747596], [200.19730151689532, 20.616784607215237], [217.92410174515408, 18.400934578682893]], [[36.224399405501785, 73.79718529199152], [36.224399405501785, 98.17153560584732], [36.224399405501785, 118.11418586263842], [34.00854937696944, 133.62513606236485], [29.576849319904753, 153.56778631915594], [27.36099929137241, 169.07873651888235]], [[38.44024943403413, 73.79718529199152], [60.598749719357585, 73.79718529199152], [80.5413999761487, 73.79718529199152], [98.26820020440745, 71.58133526345918], [115.9950004326662, 69.36548523492684], [135.9376506894573, 64.93378517786215], [158.09615097478076, 64.93378517786215], [175.8229512030395, 64.93378517786215], [195.76560145983063, 64.93378517786215], [215.70825171662176, 64.93378517786215], [224.57165183075114, 80.44473537758856], [222.35580180221876, 98.17153560584732], [222.35580180221876, 115.89833583410608], [222.35580180221876, 135.8409860908972], [220.13995177368645, 155.7836363476883]], [[40.65609946256647, 122.54588591970311], [65.03044977642227, 122.54588591970311], [84.97310003321338, 122.54588591970311], [102.69990026147214, 122.54588591970311], [122.64255051826325, 122.54588591970311], [140.369350746522, 120.33003589117077], [160.31200100331313, 118.11418586263842], [182.47050128863657, 118.11418586263842], [197.981451488363, 115.89833583410608], [217.92410174515408, 115.89833583410608]], [[25.145149262840064, 171.2945865474147], [45.08779951963116, 169.07873651888235], [65.03044977642227, 169.07873651888235], [87.18895006174573, 169.07873651888235], [104.91575029000448, 169.07873651888235], [124.8584005467956, 169.07873651888235], [144.8010508035867, 169.07873651888235], [164.74370106037782, 166.86288649035], [182.47050128863657, 164.64703646181766], [202.4131515454277, 164.64703646181766]], [[-21.387701336339177, 222.25913720365864], [2.9866489775166087, 222.25913720365864], [18.497599177243032, 220.0432871751263], [40.65609946256647, 217.82743714659395], [58.38289969082524, 217.82743714659395], [78.32554994761635, 217.82743714659395], [98.26820020440745, 217.82743714659395], [120.4267004897309, 217.82743714659395], [140.369350746522, 217.82743714659395], [160.31200100331313, 217.82743714659395], [178.03880123157188, 213.39573708952926], [197.981451488363, 213.39573708952926], [215.70825171662176, 211.17988706099692], [233.4350519448805, 208.96403703246457], [255.59355223020395, 208.96403703246457], [273.3203524584627, 208.96403703246457]], [[129.29010060386025, -25.91606599196399], [127.07425057532794, -3.7575657066405483], [127.07425057532794, 13.969234521618205], [127.07425057532794, 33.911884778409316], [129.29010060386025, 51.63868500666807], [129.29010060386025, 71.58133526345918], [129.29010060386025, 91.52398552025028], [129.29010060386025, 111.46663577704139], [129.29010060386025, 131.4092860338325], [129.29010060386025, 151.3519362906236], [129.29010060386025, 171.2945865474147], [127.07425057532794, 189.02138677567348], [124.8584005467956, 208.96403703246457], [124.8584005467956, 228.90668728925567], [124.8584005467956, 251.0651875745791], [124.8584005467956, 268.79198780283787], [122.64255051826325, 286.5187880310966], [120.4267004897309, 302.02973823082306]]]],
	["城", 9, [[[5.831211440551272, 96.31102786827903], [26.411805179795465, 94.59597839000867], [45.277349440769314, 94.59597839000867], [65.8579431800135, 94.59597839000867]], [[46.99239891903966, 27.70904873746504], [46.99239891903966, 48.28964247670923], [45.277349440769314, 70.58528569422378], [45.277349440769314, 87.73578047692727], [45.277349440769314, 108.31637421617147], [48.70744839731002, 127.18191847714532], [48.70744839731002, 146.04746273811915], [48.70744839731002, 161.4829080425523]], [[5.831211440551272, 190.63874917314826], [19.551607266714072, 178.6334028252558], [34.98705257114722, 170.05815543390406], [48.70744839731002, 159.76785856428197], [62.42784422347282, 149.47756169465987], [79.57833900617631, 140.90231430330812]], [[101.87398222369086, 75.73043412903482], [98.44388326715016, 96.31102786827903], [98.44388326715016, 115.17657212925288], [96.7288337888798, 134.0421163902267], [93.29873483233911, 156.33775960774125], [89.8686358757984, 171.7732049121744], [84.72348744098736, 188.9236996948779], [77.86328952790595, 206.07419447758141], [71.00309161482457, 221.50963978201455]], [[105.30408118023155, 75.73043412903482], [125.88467491947574, 72.30033517249413], [144.7502191804496, 70.58528569422378], [165.33081291969378, 70.58528569422378], [184.19635718066763, 70.58528569422378], [204.77695091991183, 70.58528569422378], [223.64249518088567, 70.58528569422378]], [[98.44388326715016, 122.03677004233427], [119.02447700639435, 120.32172056406392], [137.89002126736818, 118.60667108579356], [137.89002126736818, 139.18726482503777], [136.17497178909784, 159.76785856428197], [132.74487283255715, 178.6334028252558], [131.0298233542868, 195.7838976079593], [129.31477387601643, 214.64944186893317], [117.30942752812399, 212.9343923906628]], [[149.89536761526062, 3.6983560416801424], [149.89536761526062, 25.993999259194695], [151.610417093531, 44.85954352016853], [156.75556552834203, 62.01003830287203], [163.61576344142344, 82.59063204211623], [168.7609118762345, 98.02607734654937], [177.33615926758623, 115.17657212925288], [184.19635718066763, 134.0421163902267], [189.3415056154787, 147.76251221638952], [197.91675300683045, 164.913006999093], [208.20704987645252, 182.0635017817965], [216.78229726780427, 197.49894708622966], [228.7876436156967, 211.21934291239245], [240.79298996358915, 224.93973873855523], [252.79833631148162, 223.2246892602849]], [[221.92744570261533, 87.73578047692727], [213.35219831126358, 106.60132473790112], [206.49200039818217, 123.75181952060461], [201.34685196337114, 140.90231430330812], [194.48665405028973, 158.05280908601162], [187.62645613720832, 173.48825439044475], [179.05120874585657, 188.9236996948779], [167.04586239796413, 204.35914499931104], [160.18566448488275, 218.07954082547386]], [[196.20170352856007, 5.413405519950501], [209.9220993547229, 22.56390030265399], [220.21239622434496, 29.424098215735384]]]],
	["竜", 10, [[[114.84844097877144, -47.755694604306086], [112.7301364341308, -26.572649157899804], [110.61183188949018, -7.507908256134158]], [[19.524736469943193, 3.083614467068969], [40.707781916349475, 3.083614467068969], [59.77252281811512, 3.083614467068969], [80.95556826452139, 3.083614467068969], [100.02030916628703, 3.083614467068969], [121.20335461269332, 3.083614467068969], [140.26809551445893, 3.083614467068969], [161.45114096086525, 3.083614467068969], [180.51588186263086, 0.9653099224283466], [199.58062276439654, 0.9653099224283466], [220.7636682108028, 0.9653099224283466]], [[64.00913190739638, 15.793441734912733], [70.36404554131825, 34.85818263667838], [78.83726371988077, 56.04122808308466], [83.07387280916201, 68.75105535092843]], [[176.27927277334965, 11.556832645631474], [163.56944550550588, 24.266659913475237], [155.09622732694334, 43.3314008152409], [148.74131369302148, 58.159532627725284], [144.5047046037402, 70.86935989556905]], [[-22.841354422869358, 81.46088261877219], [-1.6583089764630756, 83.57918716341281], [17.40643192530257, 83.57918716341281], [36.471172827068216, 83.57918716341281], [57.654218273474484, 81.46088261877219], [76.71895917524013, 79.34257807413155], [95.78370007700578, 77.22427352949093], [114.84844097877144, 77.22427352949093], [133.91318188053708, 75.1059689848503], [155.09622732694334, 75.1059689848503], [174.160968228709, 75.1059689848503], [197.4623182197559, 75.1059689848503], [214.40875457688094, 75.1059689848503], [235.5918000232872, 75.1059689848503]], [[36.471172827068216, 130.1818871455066], [36.471172827068216, 151.3649325919129], [38.58947737170884, 172.54797803831917], [40.707781916349475, 189.49441439544418], [40.707781916349475, 210.67745984185046]], [[40.707781916349475, 121.7086689669441], [64.00913190739638, 121.7086689669441], [83.07387280916201, 121.7086689669441], [104.2569182555683, 121.7086689669441], [121.20335461269332, 121.7086689669441], [144.5047046037402, 121.7086689669441], [161.45114096086525, 121.7086689669441], [182.6341864072715, 121.7086689669441], [201.69892730903717, 119.59036442230348], [205.9355363983184, 134.41849623478788], [203.81723185367775, 153.48323713655353], [203.81723185367775, 174.6662825829598], [205.9355363983184, 193.73102348472543], [208.05384094295903, 210.67745984185046]], [[38.58947737170884, 159.8381507704754], [59.77252281811512, 159.8381507704754], [80.95556826452139, 161.95645531511605], [97.90200462164641, 164.07475985975665], [116.96674552341206, 164.07475985975665], [136.03148642517772, 161.95645531511605], [157.21453187158397, 159.8381507704754], [176.27927277334965, 159.8381507704754], [195.34401367511526, 159.8381507704754]], [[40.707781916349475, 214.9140689311317], [61.89082736275574, 214.9140689311317], [83.07387280916201, 214.9140689311317], [102.13861371092766, 212.7957643864911], [121.20335461269332, 212.7957643864911], [140.26809551445893, 212.7957643864911], [161.45114096086525, 212.7957643864911], [180.51588186263086, 212.7957643864911], [199.58062276439654, 212.7957643864911]], [[116.96674552341206, 123.82697351158474], [112.7301364341308, 142.89171441335037], [112.7301364341308, 164.07475985975665], [112.7301364341308, 185.25780530616294], [112.7301364341308, 204.32254620792858], [114.84844097877144, 223.38728710969423], [119.08505006805268, 242.45202801145987], [121.20335461269332, 259.3984643685849], [133.91318188053708, 269.98998709178807], [157.21453187158397, 272.10829163642865], [174.160968228709, 272.10829163642865], [193.22570913047463, 267.87168254714743], [212.2904500322403, 267.87168254714743], [231.35519093400592, 265.7533780025068], [248.30162729113096, 263.63507345786616], [258.8931500143341, 253.04355073466303], [258.8931500143341, 238.21541892217863]]]],
	["火", 4, [[[31.324537035109486, 41.2366275603338], [42.823481959963644, 60.401535768424054], [52.405936064008785, 75.73346233489626], [60.07189934724488, 92.9818797221775], [67.73786263048098, 106.39731546784068]], [[230.63958239924818, 23.988210173052565], [221.05712829520306, 39.32013673952477], [209.5581833703489, 60.401535768424054], [203.80871090792184, 75.73346233489626], [190.39327516225865, 91.06538890136846], [182.72731187902255, 104.48082464703165]], [[125.23258725475176, -23.924060347173082], [125.23258725475176, -2.842661318273798], [125.23258725475176, 18.238737710625486], [127.1490780755608, 37.40364591871574], [127.1490780755608, 56.568554126806006], [127.1490780755608, 77.64995315570529], [123.31609643394273, 94.89837054298653], [119.48311479232468, 114.06327875107678], [115.65013315070664, 133.22818695916703], [109.90066068827956, 148.56011352563925], [100.31820658423442, 163.89204009211144], [90.73575248018929, 179.22396665858366], [79.23680755533513, 190.72291158343782], [63.90488098886293, 200.30536568748295], [46.656463601581706, 207.97132897071904], [33.24102785591852, 215.63729225395514], [17.909101289446312, 227.13623717880932], [10.243138006210202, 234.8022004620454]], [[125.23258725475176, 108.3138062886497], [140.56451382122398, 125.56222367593094], [152.0634587460781, 138.97765942159413], [165.4788944917413, 154.30958598806632], [175.06134859578643, 167.7250217337295], [190.39327516225865, 181.1404574793927], [203.80871090792184, 194.55589322505585], [217.224146653585, 209.88781979152807], [232.55607322005721, 219.4702738955732], [249.80449060733847, 227.13623717880932]]]],
	["花", 7, [[[14.5899104164274, 46.435354465048164], [35.59290135213446, 46.435354465048164], [54.84564304319926, 46.435354465048164], [74.09838473426406, 48.185603709690426], [93.35112642532887, 48.185603709690426], [114.35411736103592, 48.185603709690426], [133.60685905210073, 48.185603709690426], [152.85960074316552, 48.185603709690426], [173.8625916788726, 48.185603709690426], [193.1153333699374, 48.185603709690426], [214.11832430564442, 48.185603709690426], [233.37106599670926, 48.185603709690426]], [[65.34713851105279, 7.929871082918567], [68.84763700033729, 27.182612773983365], [75.8486339789063, 44.685105220405916], [75.8486339789063, 65.68809615611298], [79.34913246819083, 81.44033935789327]], [[187.86458563601064, -0.8213751402927016], [179.11333941279935, 16.681117306129835], [170.36209318958805, 32.43336050791014], [163.36109621101906, 49.935852954332674], [156.36009923245, 67.43834540075522], [151.10935149852327, 79.69009011325102]], [[79.34913246819083, 104.19357953824257], [72.34813548962181, 123.44632122930739], [61.84664002176828, 139.19856443108768], [51.34514455391475, 151.45030914358347], [42.59389833070347, 165.4523031007215], [28.59190437356544, 179.45429705785955], [19.84065815035416, 188.20554328107082]], [[58.34614153248377, 151.45030914358347], [56.59589228784151, 172.45330007929053], [56.59589228784151, 193.4562910149976], [56.59589228784151, 210.95878346142013], [54.84564304319926, 231.9617743971272], [53.095393798557, 249.46426684354975]], [[226.3700690181402, 112.94482576145386], [207.11732732707543, 121.69607198466512], [191.36508412529514, 132.19756745251865], [180.8635886574416, 139.19856443108768], [165.1113454556613, 144.44931216501445], [147.60885300923877, 151.45030914358347]], [[144.10835451995428, 95.4423333150313], [142.35810527531197, 118.19557349538061], [142.35810527531197, 135.69806594180318], [142.35810527531197, 158.4513061221525], [142.35810527531197, 175.95379856857502], [142.35810527531197, 195.20654025963984], [144.10835451995428, 216.20953119534687], [145.85860376459652, 233.71202364176943], [159.86059772173456, 244.21351910962295], [182.61383790208384, 244.21351910962295], [200.11633034850638, 244.21351910962295], [219.36907203957122, 244.21351910962295], [238.621813730636, 242.4632698649807], [254.3740569324163, 233.71202364176943]]]],
	["金", 8, [[[126.99195237107924, -41.22497126642597], [116.78854344419834, -26.940198768792698], [106.58513451731744, -10.614744485783262], [96.38172559043653, 3.6700280118500075], [86.17831666355562, 17.954800509483277], [73.93422595129854, 34.28025479249273], [61.69013523904145, 48.56502729012598], [49.44604452678438, 60.80911800238307], [35.16127202915111, 73.05320871464016], [22.91718131689403, 83.25661764152106], [8.63240881926076, 97.54139013915433], [-3.61168189299633, 107.74479906603523]], [[120.8699070149507, -33.06224412492125], [135.15467951258395, -22.85883519804034], [149.43945201021722, -10.614744485783262], [163.7242245078505, -0.4113355589023513], [178.00899700548376, 9.79207336797856], [190.25308771774084, 22.036164080235636], [206.5785420007503, 34.28025479249273], [218.82263271300738, 44.483663719373624], [235.14808699601681, 58.768436217006894], [245.35149592289773, 71.01252692926397], [259.636268420531, 85.29729942689724], [267.7989955620357, 91.41934478302579]], [[61.69013523904145, 68.9718451438878], [82.09695309280326, 68.9718451438878], [102.50377094656507, 71.01252692926397], [124.95127058570306, 71.01252692926397], [141.2767248687125, 71.01252692926397], [161.68354272247433, 71.01252692926397], [182.09036057623612, 71.01252692926397]], [[47.4053627414082, 138.35502584667793], [63.73081702441763, 134.27366227592557], [84.13763487817945, 132.2329804905494], [102.50377094656507, 132.2329804905494], [122.91058880032688, 132.2329804905494], [143.3174066540887, 132.2329804905494], [161.68354272247433, 134.27366227592557], [182.09036057623612, 134.27366227592557], [200.45649664462175, 136.31434406130177]], [[126.99195237107924, 83.25661764152106], [124.95127058570306, 103.66343549528287], [124.95127058570306, 126.11093513442086], [126.99195237107924, 142.4363894174303], [126.99195237107924, 164.88388905656828], [126.99195237107924, 183.2500251249539], [126.99195237107924, 201.61616119333954], [126.99195237107924, 222.02297904710133]], [[49.44604452678438, 173.04661619807302], [63.73081702441763, 187.33138869570627], [73.93422595129854, 199.57547940796337], [82.09695309280326, 209.77888833484428]], [[208.61922378612647, 162.8432072711921], [194.3344512884932, 175.0872979834492], [182.09036057623612, 187.33138869570627], [169.84626986397905, 199.57547940796337], [159.64286093709813, 213.8602519055966]], [[-1.5710001076201365, 238.3484333301108], [18.835817746141657, 238.3484333301108], [39.242635599903466, 238.3484333301108], [57.608771668289094, 236.30775154473463], [78.0155895220509, 236.30775154473463], [98.42240737581271, 236.30775154473463], [116.78854344419834, 236.30775154473463], [137.19536129796015, 238.3484333301108], [155.56149736634578, 238.3484333301108], [175.96831522010757, 238.3484333301108], [198.4158148592456, 238.3484333301108], [216.78195092763121, 238.3484333301108], [235.14808699601681, 236.30775154473463], [255.5549048497786, 236.30775154473463]]]],
	["草", 9, [[[-2.0080237875269233, 28.484538798452746], [17.345096638775914, 30.634885512486406], [36.698217065078765, 32.78523222652005], [56.05133749138162, 34.9355789405537], [75.40445791768445, 34.9355789405537], [94.7575783439873, 32.78523222652005], [114.11069877029016, 32.78523222652005], [131.31347248255935, 28.484538798452746], [150.6665929088622, 28.484538798452746], [172.1700600491987, 28.484538798452746], [191.52318047550156, 28.484538798452746], [210.8763009018044, 26.3341920844191], [230.22942132810724, 26.3341920844191], [249.5825417544101, 28.484538798452746]], [[71.10376448961716, -8.071355340119283], [75.40445791768445, 11.281765086183555], [77.5548046317181, 30.634885512486406], [79.70515134575176, 49.98800593878924]], [[174.32040676323234, -16.672742196253893], [172.1700600491987, 2.6803782300489587], [172.1700600491987, 22.033498656351796], [170.01971333516505, 41.38661908265465], [165.71901990709776, 56.43904608089019]], [[51.75064406331431, 86.5439000773613], [51.75064406331431, 108.0473672176978], [51.75064406331431, 127.40048764400065], [49.600297349280666, 144.60326135626985], [47.449950635247006, 163.9563817825727]], [[49.600297349280666, 82.243206649294], [68.95341777558352, 80.09285993526035], [90.45688491592, 80.09285993526035], [109.81000534222287, 80.09285993526035], [129.1631257685257, 80.09285993526035], [148.51624619482854, 77.9425132212267], [167.8693666211314, 77.9425132212267], [187.22248704743424, 77.9425132212267], [204.42526075970343, 80.09285993526035], [204.42526075970343, 101.59632707559685], [204.42526075970343, 120.9494475018997], [204.42526075970343, 142.45291464223618], [204.42526075970343, 161.80603506853905], [204.42526075970343, 179.00880878080824]], [[53.90099077734796, 129.5508343580343], [75.40445791768445, 125.25014092996699], [92.60723162995366, 125.25014092996699], [111.96035205625651, 125.25014092996699], [131.31347248255935, 123.09979421593334], [150.6665929088622, 123.09979421593334], [172.1700600491987, 123.09979421593334], [191.52318047550156, 123.09979421593334]], [[45.29960392121336, 176.8584620667746], [62.50237763348257, 172.5577686387073], [86.15619148785271, 172.5577686387073], [103.3589652001219, 172.5577686387073], [122.71208562642475, 170.40742192467366], [142.0652060527276, 170.40742192467366], [159.2679797649968, 168.25707521063998], [180.7714469053333, 168.25707521063998]], [[-12.759757357695179, 224.16608977551488], [8.743709782641318, 224.16608977551488], [28.09683020894417, 224.16608977551488], [47.449950635247006, 224.16608977551488], [66.80307106154986, 222.01574306148123], [86.15619148785271, 219.8653963474476], [107.6596586281892, 219.8653963474476], [127.01277905449206, 219.8653963474476], [146.3658994807949, 219.8653963474476], [170.01971333516505, 219.8653963474476], [187.22248704743424, 219.8653963474476], [206.5756074737371, 219.8653963474476], [225.92872790003995, 219.8653963474476], [247.43219504037646, 219.8653963474476], [266.7853154666793, 219.8653963474476]], [[127.01277905449206, 174.70811535274095], [127.01277905449206, 198.36192920711107], [127.01277905449206, 215.5647029193803], [127.01277905449206, 234.91782334568313], [124.86243234045841, 254.27094377198597], [124.86243234045841, 273.6240641982888], [122.71208562642475, 290.826837910558], [122.71208562642475, 312.33030505089454]]]],
	["家", 10, [[[133.53675387702094, -31.478285779192532], [133.53675387702094, -9.622678369899319], [133.53675387702094, 7.861807557535229]], [[24.258716830554945, 7.861807557535229], [26.444277571484264, 27.53185422589911], [28.629838312413582, 45.01634015333367]], [[28.629838312413582, 5.676246816605911], [52.6710064626361, 5.676246816605911], [72.34105313099998, 7.861807557535229], [92.01109979936386, 7.861807557535229], [109.49558572679842, 10.047368298464548], [129.1656323951623, 10.047368298464548], [148.8356790635262, 10.047368298464548], [168.50572573189007, 10.047368298464548], [190.36133314118325, 10.047368298464548], [207.8458190686178, 7.861807557535229], [227.5158657369817, 5.676246816605911], [247.18591240534556, 3.4906860756765923], [247.18591240534556, 23.160732744040473]], [[50.48544572170678, 71.24306904448551], [72.34105313099998, 71.24306904448551], [94.19666054029318, 71.24306904448551], [111.68114646772774, 71.24306904448551], [133.53675387702094, 71.24306904448551], [151.0212398044555, 71.24306904448551], [170.69128647281937, 71.24306904448551], [192.54689388211256, 71.24306904448551]], [[124.79451091330365, 86.54199423099075], [113.86670720865706, 106.21204089935462], [102.93890350401045, 117.13984460400123], [81.08329609471727, 125.8820875677185], [67.96993164914134, 132.43876979050646], [50.48544572170678, 136.8098912723651], [35.18652053520155, 145.5521342360824]], [[120.42338943144502, 112.76872312214259], [122.60895017237434, 132.43876979050646], [126.98007165423299, 154.29437719979967], [126.98007165423299, 171.77886312723422], [131.35119313609164, 191.4489097955981], [133.53675387702094, 211.11895646396198], [133.53675387702094, 230.78900313232586], [133.53675387702094, 252.64461054161904], [135.72231461795025, 270.1290964690536], [140.0934360998089, 289.7991431374175], [131.35119313609164, 287.61358239648814]], [[111.68114646772774, 143.36657349515306], [94.19666054029318, 156.47993794072897], [78.89773535378794, 169.5933023863049], [65.78437090821203, 180.5211060909515], [54.85656720356542, 195.82003127745674], [39.55764201706019, 204.562274241174], [22.073156089625627, 213.30451720489128]], [[129.1656323951623, 187.07778831373946], [107.3100249858691, 198.00559201838604], [96.3822212812225, 206.74783498210334], [81.08329609471727, 219.86119942767925], [63.59881016728271, 228.60344239139653], [48.29988498077746, 237.3456853551138], [30.8153990533429, 243.90236757790177]], [[212.21694055047647, 114.95428386307191], [192.54689388211256, 125.8820875677185], [179.43352943653667, 134.6243305314358], [166.32016499096073, 143.36657349515306], [153.20680054538482, 152.10881645887034]], [[124.79451091330365, 143.36657349515306], [137.90787535887958, 158.6654986816583], [151.0212398044555, 171.77886312723422], [166.32016499096073, 184.89222757281013], [181.61909017746598, 198.00559201838604], [194.7324546230419, 208.93339572303267], [210.03137980954713, 224.2323209095379], [223.14474425512304, 232.9745638732552], [238.4436694416283, 241.71680683697247], [253.74259462813353, 250.45904980068974]]]],
	["生", 5, [[[65.01048474403865, -7.32560411363167], [56.60256276472357, 11.592220339827236], [48.194640785408495, 30.510044793286156], [39.78671880609343, 43.121927762258764], [29.27681633194959, 62.03975221571767], [20.868894352634513, 74.65163518469028], [10.35899187849067, 89.36549864849165]], [[41.8886993009222, 43.121927762258764], [62.90850424920987, 43.121927762258764], [81.82632870266877, 45.22390825708753], [102.84613365095646, 45.22390825708753], [121.76395810441538, 47.325888751916295], [140.6817825578743, 47.325888751916295], [161.70158750616196, 47.325888751916295], [182.72139245444964, 45.22390825708753], [201.63921690790858, 43.121927762258764], [218.4550608665387, 41.01994726743], [231.06694383551132, 38.91796677260122]], [[136.47782156821674, -40.95729203089195], [136.47782156821674, -19.937487082604264], [134.375841073388, -1.0196626291453583], [134.375841073388, 20.000142319142313], [134.375841073388, 38.91796677260122], [134.375841073388, 59.937771720888904], [134.375841073388, 80.95757666917658], [136.47782156821674, 97.77342062780673], [138.57980206304552, 118.7932255760944], [140.6817825578743, 137.71105002955332], [140.6817825578743, 156.62887448301223], [140.6817825578743, 179.75065992612866], [140.6817825578743, 196.56650388475882], [140.6817825578743, 219.68828932787528], [138.57980206304552, 234.40215279167666]], [[41.8886993009222, 137.71105002955332], [62.90850424920987, 135.60906953472454], [83.92830919749755, 135.60906953472454], [102.84613365095646, 135.60906953472454], [123.86593859924415, 135.60906953472454], [142.78376305270305, 135.60906953472454], [163.80356800099074, 133.5070890398958], [180.6194119596209, 133.5070890398958], [201.63921690790858, 133.5070890398958], [222.65902185619623, 131.405108545067], [239.4748658148264, 131.405108545067]], [[-4.35487158531069, 240.70809427616294], [16.66493336297698, 238.60611378133416], [33.48077732160712, 236.5041332865054], [54.50058226989481, 236.5041332865054], [73.41840672335371, 236.5041332865054], [92.33623117681262, 234.40215279167666], [111.25405563027154, 232.30017229684788], [130.17188008373046, 230.1981918020191], [151.19168503201814, 230.1981918020191], [172.2114899803058, 230.1981918020191], [191.1293144337647, 232.30017229684788], [210.04713888722364, 232.30017229684788], [228.96496334068254, 234.40215279167666], [249.9847682889702, 234.40215279167666], [268.90259274242914, 234.40215279167666]]]],
	["人", 2, [[[145.76527750791894, -14.742753700247704], [141.94198961607384, 4.373685758977729], [134.29541383238367, 21.578481272280627], [126.64883804869349, 40.69492073150606], [122.82555015684841, 54.07642835296386], [115.17897437315824, 71.28122386626674], [107.53239858946806, 90.39766332549218], [99.88582280577789, 103.77917094694999], [90.32760307616516, 119.07232251433034], [80.76938334655244, 134.3654740817107], [71.21116361693973, 149.65862564909102], [61.65294388732703, 163.04013327054884], [48.27143626586921, 174.5099969460841], [36.80157259033396, 189.80314851346444], [25.331708914798696, 201.2730121889997], [15.77348918518598, 212.74287586453497]], [[113.26733042723569, 98.04423910918236], [126.64883804869349, 111.42574673064016], [141.94198961607384, 120.98396646025287], [155.32349723753165, 132.45383013578814], [164.88171696714437, 143.9236938113234], [178.26322458860216, 155.39355748685867], [195.46802010190504, 166.86342116239393], [210.7611716692854, 176.42164089200662], [226.05432323666577, 187.8915045675419], [241.3474748040461, 201.2730121889997], [254.7289824255039, 212.74287586453497]]]],
	["田", 5, [[[35.69829026272751, 49.25279902828876], [35.69829026272751, 71.98714791998913], [35.69829026272751, 91.47373268430374], [35.69829026272751, 109.33643538492547], [37.3221723264204, 130.44690221293294], [40.569936453806164, 149.93348697724755], [40.569936453806164, 167.79618967786928], [42.193818517499054, 185.65889237849098], [42.193818517499054, 206.76935920649845]], [[37.3221723264204, 46.005034900903], [60.056521218120764, 46.005034900903], [77.91922391874249, 46.005034900903], [97.40580868305709, 46.005034900903], [116.89239344737169, 42.757270773517234], [138.00286027537916, 42.757270773517234], [157.48944503969378, 41.133388709824345], [176.97602980400836, 42.757270773517234], [196.46261456832298, 44.381152837210124], [215.9491993326376, 44.381152837210124], [219.19696346002334, 63.86773760152472], [219.19696346002334, 84.97820442953221], [219.19696346002334, 102.84090713015392], [219.19696346002334, 123.95137395816141], [219.19696346002334, 143.437958722476], [219.19696346002334, 162.9245434867906], [222.44472758740912, 182.4111282511052], [222.44472758740912, 201.8977130154198]], [[123.38792170214322, 44.381152837210124], [121.76403963845034, 65.4916196652176], [121.76403963845034, 86.60208649322509], [121.76403963845034, 106.08867125753969], [123.38792170214322, 123.95137395816141], [125.0118037658361, 143.437958722476], [126.635685829529, 162.9245434867906], [128.25956789322188, 182.4111282511052], [128.25956789322188, 201.8977130154198]], [[43.81770058119193, 128.82302014924005], [63.30428534550653, 127.19913808554718], [84.41475217351402, 127.19913808554718], [102.27745487413574, 123.95137395816141], [123.38792170214322, 123.95137395816141], [141.25062440276494, 123.95137395816141], [162.36109123077242, 123.95137395816141], [181.84767599508703, 123.95137395816141], [199.71037869570876, 122.32749189446852], [214.3253172689447, 122.32749189446852]], [[45.44158264488482, 211.64100539757712], [66.55204947289229, 210.01712333388423], [86.0386342372069, 208.39324127019137], [105.5252190015215, 208.39324127019137], [125.0118037658361, 208.39324127019137], [146.12227059384358, 208.39324127019137], [165.6088553581582, 206.76935920649845], [185.09544012247278, 205.1454771428056], [204.5820248867874, 205.1454771428056], [220.82084552371623, 206.76935920649845]]]],
	["川", 3, [[[55.33703270022585, 53.44069179720769], [56.71664579104592, 74.13488815950875], [58.09625888186599, 93.44947143098973], [58.09625888186599, 112.76405470247072], [58.09625888186599, 133.45825106477176], [53.957419609405775, 151.39322124543267], [48.4389672461255, 166.56896524445344], [41.54090179202515, 183.12432233429428], [33.26322324710473, 195.5408401516749]], [[122.93807415040929, 52.06107870638763], [120.17884796876915, 71.37566197786862], [118.79923487794908, 92.06985834016966], [118.79923487794908, 111.38444161165064], [118.79923487794908, 130.6990248831316], [120.17884796876915, 151.39322124543267], [120.17884796876915, 170.70780451691365]], [[198.81679414551314, 31.366882344086576], [196.057567963873, 52.06107870638763], [196.057567963873, 71.37566197786862], [197.43718105469307, 90.6902452493496], [200.19640723633321, 110.00482852083057], [200.19640723633321, 129.31941179231154], [200.19640723633321, 150.0136081546126], [201.5760203271533, 169.32819142609358], [201.5760203271533, 191.4020008792147], [201.5760203271533, 209.33697105987562]]]],
	["空", 8, [[[124.98710845753696, -37.55862527328347], [122.91427667871295, -18.903139263867416], [122.91427667871295, 1.8251785243726601]], [[23.418351295160605, 16.33500097614072], [21.345519516336594, 37.063318764380796], [21.345519516336594, 57.79163655262086]], [[23.418351295160605, 14.262169197316709], [46.21950086222469, 14.262169197316709], [66.94781865046475, 14.262169197316709], [83.53047288105681, 16.33500097614072], [104.25879066929689, 16.33500097614072], [124.98710845753696, 16.33500097614072], [145.71542624577705, 16.33500097614072], [164.3709122551931, 16.33500097614072], [183.02639826460916, 14.262169197316709], [203.75471605284923, 14.262169197316709], [222.41020206226534, 14.262169197316709], [226.55586561991333, 30.844823427908764], [224.4830338410893, 47.427477658500834]], [[85.60330465988083, 51.57314121614884], [77.31197754458479, 70.2286272255649], [69.02065042928876, 86.81128145615696], [58.656491535168726, 103.39393568674902], [48.29233264104869, 115.83092635969307], [33.78251018928064, 126.1950852538131]], [[149.86108980342505, 39.13615054320479], [147.78825802460102, 59.86446833144487], [145.71542624577705, 78.51995434086093], [145.71542624577705, 101.32110390792502], [145.71542624577705, 117.90375813851708], [162.29808047636908, 124.1222534749891], [178.88073470696116, 126.1950852538131], [199.60905249520124, 126.1950852538131], [218.2645385046173, 124.1222534749891], [232.77436095638535, 111.68526280204506]], [[40.00100552575266, 165.57888905146925], [60.72932331399274, 163.50605727264525], [79.3848093234088, 163.50605727264525], [102.18595889047289, 163.50605727264525], [122.91427667871295, 163.50605727264525], [139.49693090930504, 161.43322549382123], [160.2252486975451, 159.36039371499723], [178.88073470696116, 159.36039371499723], [199.60905249520124, 159.36039371499723]], [[122.91427667871295, 173.87021616676526], [122.91427667871295, 194.59853395500534], [122.91427667871295, 217.39968352206944], [120.84144489988896, 236.0551695314855], [120.84144489988896, 248.49216020442952]], [[0.6172017280965179, 252.63782376207757], [21.345519516336594, 252.63782376207757], [42.07383730457667, 252.63782376207757], [60.72932331399274, 252.63782376207757], [81.45764110223281, 252.63782376207757], [104.25879066929689, 252.63782376207757], [122.91427667871295, 252.63782376207757], [141.569762688129, 252.63782376207757], [162.29808047636908, 252.63782376207757], [183.02639826460916, 250.56499198325355], [201.68188427402526, 250.56499198325355], [220.33737028344132, 250.56499198325355], [241.0656880716814, 250.56499198325355], [261.79400585992147, 250.56499198325355]]]],
	["土", 3, [[[15.022070733361758, 74.91925828486879], [34.960782692320805, 72.92538708897288], [54.89949465127984, 72.92538708897288], [74.83820661023888, 72.92538708897288], [94.77691856919793, 72.92538708897288], [116.70950172405287, 72.92538708897288], [136.64821368301193, 70.93151589307698], [154.59305444607506, 68.93764469718107], [174.5317664050341, 68.93764469718107], [194.47047836399315, 68.93764469718107], [212.4153191270563, 70.93151589307698], [228.36628869422353, 72.92538708897288]], [[114.71563052815698, -28.762043901718243], [114.71563052815698, -2.8417183550714924], [116.70950172405287, 11.11538001619985], [118.70337291994878, 33.04796317105479], [118.70337291994878, 54.98054632590974], [120.69724411584468, 70.93151589307698], [120.69724411584468, 90.87022785203601], [120.69724411584468, 110.80893981099507], [120.69724411584468, 130.7476517699541], [120.69724411584468, 152.68023492480904], [120.69724411584468, 170.6250756878722], [120.69724411584468, 190.56378764683123]], [[-12.892126009180913, 202.52701482220667], [9.04045714567404, 202.52701482220667], [26.98529790873718, 204.52088601810257], [48.917881063592134, 206.51475721399848], [70.85046421844709, 208.50862840989438], [86.80143378561431, 208.50862840989438], [108.73401694046926, 206.51475721399848], [126.6788577035324, 204.52088601810257], [146.61756966249143, 204.52088601810257], [168.5501528173464, 204.52088601810257], [188.48886477630543, 204.52088601810257], [204.43983434347268, 206.51475721399848], [224.37854630243172, 206.51475721399848], [244.31725826139075, 206.51475721399848], [266.2498414162457, 208.50862840989438], [280.20693978751706, 208.50862840989438]]]],
	["石", 5, [[[26.091444268168942, 38.874906302536175], [44.43673147010823, 37.040377582342245], [64.61654739224146, 35.205848862148315], [84.79636331437469, 33.371320141954385], [103.14165051631399, 33.371320141954385], [123.32146643844722, 35.205848862148315], [143.50128236058043, 35.205848862148315], [163.68109828271366, 33.371320141954385], [182.02638548465296, 31.536791421760455], [202.2062014067862, 31.536791421760455], [222.38601732891942, 29.702262701566525], [240.73130453085872, 29.702262701566525]], [[104.97617923650792, 38.874906302536175], [99.47259307592613, 57.220193504475475], [93.96900691534434, 77.40000942660869], [86.63089203456862, 92.07623918816013], [75.62371971340504, 106.75246894971157], [64.61654739224146, 125.09775615165087], [53.60937507107788, 141.60851463339623], [42.6022027499143, 158.1192731151416], [33.42955914894465, 170.9609741564991], [20.587858107587152, 180.13361775746876], [11.415214506617502, 187.47173263824448]], [[82.96183459418076, 136.10492847281444], [81.12730587398683, 156.28474439494767], [77.45824843359897, 174.63003159688697], [77.45824843359897, 194.8098475190202], [75.62371971340504, 214.98966344115343], [73.78919099321111, 233.33495064309272]], [[77.45824843359897, 130.60134231223265], [97.6380643557322, 126.9322848718448], [119.65240899805936, 126.9322848718448], [137.99769619999864, 126.9322848718448], [158.17751212213187, 128.76681359203872], [176.52279932407117, 128.76681359203872], [194.86808652601047, 130.60134231223265], [215.0479024481437, 130.60134231223265], [222.38601732891942, 145.27757207378409], [222.38601732891942, 165.45738799591732], [220.5514886087255, 185.63720391805055], [220.5514886087255, 203.98249111998985], [220.5514886087255, 220.49324960173522]], [[75.62371971340504, 227.83136448251093], [95.80353563553827, 225.996835762317], [115.9833515576715, 225.996835762317], [136.1631674798047, 225.996835762317], [156.34298340193794, 225.996835762317], [176.52279932407117, 225.996835762317], [196.7026152462044, 225.996835762317], [215.0479024481437, 225.996835762317]]]],
	["寺", 6, [[[31.52709846516754, 43.51832361553133], [53.11668096683145, 41.55563429719824], [74.70626346849537, 41.55563429719824], [94.33315665182619, 41.55563429719824], [113.96004983515702, 39.59294497886516], [131.62425370015475, 39.59294497886516], [151.2511468834856, 39.59294497886516], [170.87804006681642, 39.59294497886516], [190.50493325014725, 39.59294497886516]], [[119.84811779015627, -9.474287979461906], [119.84811779015627, 12.115294522201992], [119.84811779015627, 31.742187705532828], [123.77349642682243, 55.29445952552982], [123.77349642682243, 70.99597407219449], [123.77349642682243, 90.62286725552532]], [[-25.390891766491876, 106.32438180218998], [-3.8013092648279496, 106.32438180218998], [17.78827323683595, 106.32438180218998], [37.415166420166784, 106.32438180218998], [59.004748921830696, 102.39900316552381], [76.66895278682844, 102.39900316552381], [96.29584597015926, 100.43631384719073], [113.96004983515702, 100.43631384719073], [133.58694301848786, 100.43631384719073], [153.21383620181868, 100.43631384719073], [174.80341870348258, 100.43631384719073], [194.4303118868134, 100.43631384719073], [216.01989438847733, 100.43631384719073], [233.68409825347507, 100.43631384719073], [255.27368075513897, 98.47362452885764], [272.93788462013674, 98.47362452885764]], [[-1.8386199464948731, 171.0931293071817], [19.75096255516904, 171.0931293071817], [39.37785573849986, 171.0931293071817], [59.004748921830696, 171.0931293071817], [80.59433142349461, 171.0931293071817], [102.18391392515852, 171.0931293071817], [119.84811779015627, 171.0931293071817], [139.4750109734871, 171.0931293071817], [159.1019041568179, 171.0931293071817], [178.72879734014876, 171.0931293071817], [198.35569052347958, 169.13043998884865], [217.98258370681043, 169.13043998884865], [239.57216620847433, 169.13043998884865]], [[159.1019041568179, 133.80203225885316], [157.13921483848483, 155.39161476051703], [157.13921483848483, 175.01850794384785], [157.13921483848483, 194.64540112717867], [157.13921483848483, 216.2349836288426], [155.17652552015176, 235.86187681217342], [155.17652552015176, 253.5260806771712], [153.21383620181868, 273.152973860502], [143.40038961015327, 279.0410418155013], [127.6988750634886, 273.152973860502]], [[45.26592369349912, 202.49615840051104], [57.04205960349762, 212.30960499217645], [70.78088483182918, 228.01111953884111], [80.59433142349461, 239.78725544883963]]]],
	["水", 4, [[[139.05211919458242, -24.740287269128714], [136.83407320449726, -4.777873358362285], [136.83407320449726, 15.184540552404115], [132.39798122432694, 32.92890847308537], [132.39798122432694, 52.89132238385177], [130.17993523424178, 72.85373629461819], [130.17993523424178, 92.81615020538459], [130.17993523424178, 112.778564116151], [134.6160272144121, 130.52293203683226], [134.6160272144121, 150.48534594759866], [134.6160272144121, 170.4477598583651], [134.6160272144121, 190.4101737691315], [132.39798122432694, 210.3725876798979], [130.17993523424178, 230.33500159066432], [127.96188924415662, 248.07936951134556], [127.96188924415662, 268.04178342211196], [112.43556731356053, 272.4778754022823], [101.34533736313475, 259.1695994617713]], [[-7.338916151037921, 77.2898282747885], [17.059589739898797, 77.2898282747885], [34.80395766058004, 79.50787426487366], [52.548325581261295, 79.50787426487366], [72.51073949202771, 79.50787426487366], [88.0370614226238, 79.50787426487366], [81.38292345236833, 101.68833416572522], [74.72878548211287, 114.99661010623616], [65.85660152177223, 132.74097802691742], [59.20246355151677, 150.48534594759866], [48.11223360109098, 163.7936218881096], [30.367865680409736, 179.3199438187057], [19.277635729983942, 185.97408178896117], [8.187405779558162, 199.2823577294721]], [[236.6461427583293, 26.274770502829895], [221.11982082773318, 39.583046443340834], [205.5934988971371, 50.67327639376661], [192.28522295662617, 61.76350634419241], [176.75890102603006, 72.85373629461819], [156.79648711526366, 86.16201223512913], [145.70625716483787, 92.81615020538459]], [[134.6160272144121, 88.38005822521428], [147.92430315492302, 103.90638015581038], [163.45062508551914, 121.65074807649162], [176.75890102603006, 134.95902401700258], [190.067176966541, 146.04925396742834], [205.5934988971371, 161.57557589802445], [216.6837288475629, 174.88385183853538], [232.21005077815897, 183.756035798876], [247.73637270875508, 192.62821975921662], [261.044648649266, 199.2823577294721], [278.78901656994725, 205.93649569972757]]]],
	["滝", 13, [[[-14.861263383744387, -2.3149958063809493], [1.8311712817984187, 6.958579007809519], [16.66889098450315, 16.232153821999972], [29.651895724369794, 27.360443599028514]], [[-14.861263383744387, 77.43774759565699], [-0.023543681039654984, 88.56603737268553], [12.959461058826975, 99.69432714971407], [24.087750835855516, 108.96790196390454]], [[-14.861263383744387, 238.79794936257093], [-5.587688569553933, 223.96022965986617], [5.540601207474609, 209.12250995716147], [12.959461058826975, 192.43007529161864], [20.37832091017934, 183.15650047742818]], [[137.22536356897908, -19.007430471923755], [135.370648606141, 1.3944341192952407], [135.370648606141, 21.79629871051425]], [[72.3103398696459, 27.360443599028514], [92.7122044608649, 27.360443599028514], [113.11406905208389, 25.505728636190426], [131.6612186804648, 25.505728636190426], [152.0630832716838, 23.651013673352338], [172.46494786290282, 23.651013673352338], [191.01209749128373, 23.651013673352338], [211.41396208250274, 23.651013673352338]], [[100.13106431221726, 49.61702315308561], [105.69520920073154, 70.01888774430462]], [[174.31966282574092, 34.77930345038088], [168.75551793722664, 53.3264530787618], [163.19137304871236, 70.01888774430462]], [[51.90847527842689, 86.71132240984744], [72.3103398696459, 86.71132240984744], [92.7122044608649, 86.71132240984744], [113.11406905208389, 86.71132240984744], [131.6612186804648, 84.85660744700934], [150.20836830884573, 83.00189248417126], [170.61023290006472, 83.00189248417126], [191.01209749128373, 83.00189248417126], [209.55924711966463, 83.00189248417126], [229.96111171088364, 83.00189248417126]], [[83.43862964667444, 123.80562166660927], [81.58391468383635, 144.20748625782826], [81.58391468383635, 162.75463588620917], [81.58391468383635, 183.15650047742818], [79.72919972099825, 203.5583650686472]], [[81.58391468383635, 118.24147677809499], [103.84049423789344, 120.09619174093308], [122.38764386627436, 120.09619174093308], [140.93479349465525, 118.24147677809499], [161.33665808587426, 116.3867618152569], [179.88380771425517, 114.5320468524188], [200.28567230547418, 112.67733188958071], [203.99510223115038, 129.36976655512353], [203.99510223115038, 147.91691618350444], [202.14038726831228, 168.31878077472345], [202.14038726831228, 188.72064536594246], [198.43095734263608, 201.7036501058091]], [[83.43862964667444, 157.1904909976949], [103.84049423789344, 157.1904909976949], [124.24235882911245, 157.1904909976949], [144.64422342033146, 157.1904909976949], [166.90080297438854, 157.1904909976949], [183.59323763993137, 155.33577603485682], [196.576242379798, 153.48106107201872]], [[81.58391468383635, 205.41308003148526], [101.98577927505535, 203.5583650686472], [120.53292890343626, 201.7036501058091], [140.93479349465525, 201.7036501058091], [159.4819431230362, 199.84893514297102], [179.88380771425517, 199.84893514297102], [196.576242379798, 199.84893514297102]], [[144.64422342033146, 127.51505159228545], [142.78950845749335, 147.91691618350444], [140.93479349465525, 166.46406581188535], [140.93479349465525, 186.86593040310436], [142.78950845749335, 205.41308003148526], [144.64422342033146, 223.96022965986617], [146.49893838316953, 242.5073792882471], [153.9177982345219, 255.49038402811374], [174.31966282574092, 257.34509899095184], [194.72152741695993, 257.34509899095184], [213.26867704534084, 257.34509899095184], [233.67054163655985, 255.49038402811374], [239.2346865250741, 240.652664325409]]]],
	["木", 4, [[[2.2062008730216007, 70.61529248691717], [22.74286969895202, 70.61529248691717], [43.279538524882426, 70.61529248691717], [63.81620735081283, 70.61529248691717], [82.29920929415019, 70.61529248691717], [102.8358781200806, 68.56162560432412], [123.372546946011, 68.56162560432412], [141.85554888934837, 68.56162560432412], [164.4458845978718, 70.61529248691717], [180.87521965861615, 72.66895936951022], [203.4655553671396, 72.66895936951022], [221.94855731047696, 72.66895936951022], [240.43155925381433, 72.66895936951022], [256.86089431455866, 72.66895936951022]], [[125.42621382860405, -32.06805164273487], [123.372546946011, -11.531382816804467], [123.372546946011, 9.005286009125953], [123.372546946011, 27.488287952463324], [123.372546946011, 48.02495677839373], [125.42621382860405, 68.56162560432412], [127.47988071119708, 87.04462754766149], [129.53354759379013, 107.5812963735919], [129.53354759379013, 126.06429831692927], [131.58721447638317, 146.60096714285967], [131.58721447638317, 165.08396908619704], [133.6408813589762, 183.56697102953441], [135.69454824156924, 202.04997297287179], [135.69454824156924, 222.5866417988022], [135.69454824156924, 243.1233106247326], [133.6408813589762, 263.659979450663], [131.58721447638317, 282.14298139400034], [131.58721447638317, 296.5186495721516]], [[121.31888006341796, 78.82996001728932], [111.05054565045276, 95.25929507803366], [98.72854435489452, 109.63496325618495], [90.51387682452236, 124.01063143433623], [80.24554241155715, 136.33263272989447], [67.92354111599892, 152.7619677906388], [59.70887358562675, 165.08396908619704], [49.440539172661545, 179.45963726434832], [35.06487099451026, 191.78163855990658], [20.68920281635897, 202.04997297287179], [4.25986775561465, 212.318307385837], [-8.062133539943602, 220.53297491620913]], [[139.80188200675533, 87.04462754766149], [150.07021641972054, 103.47396260840583], [162.39221771527878, 119.90329766915015], [172.66055212824398, 136.33263272989447], [184.98255342380222, 152.7619677906388], [195.25088783676745, 167.13763596879008], [207.57288913232566, 179.45963726434832], [219.89489042788392, 191.78163855990658], [232.21689172344216, 202.04997297287179], [244.5388930190004, 212.318307385837], [258.9145611971517, 220.53297491620913]]]],
];


// color coded stroke colors (for 30 strokes)
// based on https://kanjivg.tagaini.net/viewer.html
KanjiCanvas.strokeColors = ['#bf0000', '#bf5600', '#bfac00', '#7cbf00', '#26bf00', '#00bf2f', '#00bf85', '#00a2bf', '#004cbf', '#0900bf', '#5f00bf', '#b500bf', '#bf0072', '#bf001c', '#bf2626', '#bf6b26', '#bfaf26', '#89bf26', '#44bf26', '#26bf4c', '#26bf91', '#26a8bf', '#2663bf', '#2d26bf', '#7226bf', '#b726bf', '#bf2682', '#bf263d', '#bf4c4c', '#bf804c'];


// init canvas
KanjiCanvas.init = function (id) {
	KanjiCanvas["canvas_" + id] = document.getElementById(id);
	KanjiCanvas["canvas_" + id].tabIndex = 0; // makes canvas focusable, allowing usage of shortcuts
	KanjiCanvas["ctx_" + id] = KanjiCanvas["canvas_" + id].getContext("2d");
	KanjiCanvas["w_" + id] = KanjiCanvas["canvas_" + id].width;
	KanjiCanvas["h_" + id] = KanjiCanvas["canvas_" + id].height;
	KanjiCanvas["flagOver_" + id] = false;
	KanjiCanvas["flagDown_" + id] = false;
	KanjiCanvas["prevX_" + id] = 0;
	KanjiCanvas["currX_" + id] = 0;
	KanjiCanvas["prevY_" + id] = 0;
	KanjiCanvas["currY_" + id] = 0;
	KanjiCanvas["dot_flag_" + id] = false;
	KanjiCanvas["recordedPattern_" + id] = new Array();
	KanjiCanvas["currentLine_" + id] = null;

	KanjiCanvas["canvas_" + id].addEventListener("mousemove", function (e) {
		KanjiCanvas.findxy('move', e, id)
	}, false);
	KanjiCanvas["canvas_" + id].addEventListener("mousedown", function (e) {
		KanjiCanvas.findxy('down', e, id)
	}, false);
	KanjiCanvas["canvas_" + id].addEventListener("mouseup", function (e) {
		KanjiCanvas.findxy('up', e, id)
	}, false);
	KanjiCanvas["canvas_" + id].addEventListener("mouseout", function (e) {
		KanjiCanvas.findxy('out', e, id)
	}, false);
	KanjiCanvas["canvas_" + id].addEventListener("mouseover", function (e) {
		KanjiCanvas.findxy('over', e, id)
	}, false);

	// touch events
	KanjiCanvas["canvas_" + id].addEventListener("touchmove", function (e) {
		KanjiCanvas.findxy('move', e, id);
	}, false);
	KanjiCanvas["canvas_" + id].addEventListener("touchstart", function (e) {
		KanjiCanvas.findxy('down', e, id);
	}, false);
	KanjiCanvas["canvas_" + id].addEventListener("touchend", function (e) {
		KanjiCanvas.findxy('up', e, id);
	}, false);
};

KanjiCanvas.draw = function (id, color) {
	KanjiCanvas["ctx_" + id].beginPath();
	KanjiCanvas["ctx_" + id].moveTo(KanjiCanvas["prevX_" + id], KanjiCanvas["prevY_" + id]);
	KanjiCanvas["ctx_" + id].lineTo(KanjiCanvas["currX_" + id], KanjiCanvas["currY_" + id]);
	KanjiCanvas["ctx_" + id].strokeStyle = color ? color : "#333";
	KanjiCanvas["ctx_" + id].lineCap = "round";
	//KanjiCanvas["ctx_" + id].lineJoin = "round";
	//KanjiCanvas["ctx_" + id].lineMiter = "round";
	KanjiCanvas["ctx_" + id].lineWidth = 4;
	KanjiCanvas["ctx_" + id].stroke();
	KanjiCanvas["ctx_" + id].closePath();
};

KanjiCanvas.deleteLast = function (id) {
	KanjiCanvas["ctx_" + id].clearRect(0, 0, KanjiCanvas["w_" + id], KanjiCanvas["h_" + id]);
	for (var i = 0; i < KanjiCanvas["recordedPattern_" + id].length - 1; i++) {
		var stroke_i = KanjiCanvas["recordedPattern_" + id][i];
		for (var j = 0; j < stroke_i.length - 1; j++) {
			KanjiCanvas["prevX_" + id] = stroke_i[j][0];
			KanjiCanvas["prevY_" + id] = stroke_i[j][1];

			KanjiCanvas["currX_" + id] = stroke_i[j + 1][0];
			KanjiCanvas["currY_" + id] = stroke_i[j + 1][1];
			KanjiCanvas.draw(id);
		}
	}
	KanjiCanvas["recordedPattern_" + id].pop();
};

KanjiCanvas.erase = function (id) {
	KanjiCanvas["ctx_" + id].clearRect(0, 0, KanjiCanvas["w_" + id], KanjiCanvas["h_" + id]);
	KanjiCanvas["recordedPattern_" + id].length = 0;
};

KanjiCanvas.findxy = function (res, e, id) {
	var touch = e.changedTouches ? e.changedTouches[0] : null;

	if (touch) e.preventDefault(); // prevent scrolling while drawing to the canvas

	if (res == 'down') {
		var rect = KanjiCanvas["canvas_" + id].getBoundingClientRect();
		KanjiCanvas["prevX_" + id] = KanjiCanvas["currX_" + id];
		KanjiCanvas["prevY_" + id] = KanjiCanvas["currY_" + id];
		KanjiCanvas["currX_" + id] = (touch ? touch.clientX : e.clientX) - rect.left;
		KanjiCanvas["currY_" + id] = (touch ? touch.clientY : e.clientY) - rect.top;
		KanjiCanvas["currentLine_" + id] = new Array();
		KanjiCanvas["currentLine_" + id].push([KanjiCanvas["currX_" + id], KanjiCanvas["currY_" + id]]);

		KanjiCanvas["flagDown_" + id] = true;
		KanjiCanvas["flagOver_" + id] = true;
		KanjiCanvas["dot_flag_" + id] = true;
		if (KanjiCanvas["dot_flag_" + id]) {
			KanjiCanvas["ctx_" + id].beginPath();
			KanjiCanvas["ctx_" + id].fillRect(KanjiCanvas["currX_" + id], KanjiCanvas["currY_" + id], 2, 2);
			KanjiCanvas["ctx_" + id].closePath();
			KanjiCanvas["dot_flag_" + id] = false;
		}
	}
	if (res == 'up') {
		KanjiCanvas["flagDown_" + id] = false;
		if (KanjiCanvas["flagOver_" + id] == true) {
			KanjiCanvas["recordedPattern_" + id].push(KanjiCanvas["currentLine_" + id]);
		}
	}

	if (res == "out") {
		KanjiCanvas["flagOver_" + id] = false;
		if (KanjiCanvas["flagDown_" + id] == true) {
			KanjiCanvas["recordedPattern_" + id].push(KanjiCanvas["currentLine_" + id]);
		}
		KanjiCanvas["flagDown_" + id] = false;
	}

	/*
	if (res == "over") {
	}
	*/

	if (res == 'move') {
		if (KanjiCanvas["flagOver_" + id] && KanjiCanvas["flagDown_" + id]) {
			var rect = KanjiCanvas["canvas_" + id].getBoundingClientRect();
			KanjiCanvas["prevX_" + id] = KanjiCanvas["currX_" + id];
			KanjiCanvas["prevY_" + id] = KanjiCanvas["currY_" + id];
			KanjiCanvas["currX_" + id] = (touch ? touch.clientX : e.clientX) - rect.left;
			KanjiCanvas["currY_" + id] = (touch ? touch.clientY : e.clientY) - rect.top;
			KanjiCanvas["currentLine_" + id].push([KanjiCanvas["prevX_" + id], KanjiCanvas["prevY_" + id]]);
			KanjiCanvas["currentLine_" + id].push([KanjiCanvas["currX_" + id], KanjiCanvas["currY_" + id]]);
			KanjiCanvas.draw(id);
		}
	}
};

// redraw to current canvas according to 
// what is currently stored in KanjiCanvas["recordedPattern_" + id]
// add numbers to each stroke
KanjiCanvas.redraw = function (id) {
	KanjiCanvas["ctx_" + id].clearRect(0, 0, KanjiCanvas["w_" + id], KanjiCanvas["h_" + id]);

	// draw strokes
	for (var i = 0; i < KanjiCanvas["recordedPattern_" + id].length; i++) {
		var stroke_i = KanjiCanvas["recordedPattern_" + id][i];

		for (var j = 0; j < stroke_i.length - 1; j++) {
			KanjiCanvas["prevX_" + id] = stroke_i[j][0];
			KanjiCanvas["prevY_" + id] = stroke_i[j][1];

			KanjiCanvas["currX_" + id] = stroke_i[j + 1][0];
			KanjiCanvas["currY_" + id] = stroke_i[j + 1][1];
			KanjiCanvas.draw(id, KanjiCanvas.strokeColors[i]);
		}
	}

	// draw stroke numbers
	if (KanjiCanvas["canvas_" + id].dataset.strokeNumbers != 'false') {
		for (var i = 0; i < KanjiCanvas["recordedPattern_" + id].length; i++) {
			var stroke_i = KanjiCanvas["recordedPattern_" + id][i],
				x = stroke_i[Math.floor(stroke_i.length / 2)][0] + 5,
				y = stroke_i[Math.floor(stroke_i.length / 2)][1] - 5;

			KanjiCanvas["ctx_" + id].font = "20px Arial";

			// outline
			KanjiCanvas["ctx_" + id].lineWidth = 3;
			KanjiCanvas["ctx_" + id].strokeStyle = KanjiCanvas.alterHex(KanjiCanvas.strokeColors[i] ? KanjiCanvas.strokeColors[i] : "#333333", 60, 'dec');
			KanjiCanvas["ctx_" + id].strokeText((i + 1).toString(), x, y);

			// fill
			KanjiCanvas["ctx_" + id].fillStyle = KanjiCanvas.strokeColors[i] ? KanjiCanvas.strokeColors[i] : "#333";
			KanjiCanvas["ctx_" + id].fillText((i + 1).toString(), x, y);
		}
	}
};


// modifies hex colors to darken or lighten them
// ex: KanjiCanvas.alterHex(KanjiCanvas.strokeColors[0], 60, 'dec'); // decrement all colors by 60 (use 'inc' to increment)
KanjiCanvas.alterHex = function (hex, number, action) {
	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex),
		color = [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)],
		i = 0, j = color.length;

	for (; i < j; i++) {
		switch (action) {
			case 'inc':
				color[i] = ((color[i] + number) > 255 ? 255 : color[i] + number).toString(16);
				break;

			case 'dec':
				color[i] = ((color[i] - number) < 0 ? 0 : color[i] - number).toString(16);
				break;

			default:
				break;
		}

		// add trailing 0
		if (color[i].length == 1) color[i] = color[i] + '0';
	}

	return '#' + color.join('');
};


// linear normalization for KanjiCanvas["recordedPattern_" + id]
KanjiCanvas.normalizeLinear = function (id) {

	var normalizedPattern = new Array();
	KanjiCanvas.newHeight = 256;
	KanjiCanvas.newWidth = 256;
	KanjiCanvas.xMin = 256;
	KanjiCanvas.xMax = 0;
	KanjiCanvas.yMin = 256;
	KanjiCanvas.yMax = 0;
	// first determine drawn character width / length
	for (var i = 0; i < KanjiCanvas["recordedPattern_" + id].length; i++) {
		var stroke_i = KanjiCanvas["recordedPattern_" + id][i];
		for (var j = 0; j < stroke_i.length; j++) {
			KanjiCanvas.x = stroke_i[j][0];
			KanjiCanvas.y = stroke_i[j][1];
			if (KanjiCanvas.x < KanjiCanvas.xMin) {
				KanjiCanvas.xMin = KanjiCanvas.x;
			}
			if (KanjiCanvas.x > KanjiCanvas.xMax) {
				KanjiCanvas.xMax = KanjiCanvas.x;
			}
			if (KanjiCanvas.y < KanjiCanvas.yMin) {
				KanjiCanvas.yMin = KanjiCanvas.y;
			}
			if (KanjiCanvas.y > KanjiCanvas.yMax) {
				KanjiCanvas.yMax = KanjiCanvas.y;
			}
		}
	}
	KanjiCanvas.oldHeight = Math.abs(KanjiCanvas.yMax - KanjiCanvas.yMin);
	KanjiCanvas.oldWidth = Math.abs(KanjiCanvas.xMax - KanjiCanvas.xMin);

	for (var i = 0; i < KanjiCanvas["recordedPattern_" + id].length; i++) {
		var stroke_i = KanjiCanvas["recordedPattern_" + id][i];
		var normalized_stroke_i = new Array();
		for (var j = 0; j < stroke_i.length; j++) {
			KanjiCanvas.x = stroke_i[j][0];
			KanjiCanvas.y = stroke_i[j][1];
			KanjiCanvas.xNorm = (KanjiCanvas.x - KanjiCanvas.xMin) * (KanjiCanvas.newWidth / KanjiCanvas.oldWidth);
			KanjiCanvas.yNorm = (KanjiCanvas.y - KanjiCanvas.yMin) * (KanjiCanvas.newHeight / KanjiCanvas.oldHeight);
			normalized_stroke_i.push([KanjiCanvas.xNorm, KanjiCanvas.yNorm]);
		}
		normalizedPattern.push(normalized_stroke_i);
	}
	KanjiCanvas["recordedPattern_" + id] = normalizedPattern;
	KanjiCanvas.redraw(id);
};

// helper functions for moment normalization 

KanjiCanvas.m10 = function (pattern) {
	var sum = 0;
	for (var i = 0; i < pattern.length; i++) {
		var stroke_i = pattern[i];
		for (var j = 0; j < stroke_i.length; j++) {
			sum += stroke_i[j][0];
		}
	}
	return sum;
};

KanjiCanvas.m01 = function (pattern) {
	var sum = 0;
	for (var i = 0; i < pattern.length; i++) {
		var stroke_i = pattern[i];
		for (var j = 0; j < stroke_i.length; j++) {
			sum += stroke_i[j][1];
		}
	}
	return sum;
};

KanjiCanvas.m00 = function (pattern) {
	var sum = 0;
	for (var i = 0; i < pattern.length; i++) {
		var stroke_i = pattern[i];
		sum += stroke_i.length;
	}
	return sum;
};

KanjiCanvas.mu20 = function (pattern, xc) {
	var sum = 0;
	for (var i = 0; i < pattern.length; i++) {
		var stroke_i = pattern[i];
		for (var j = 0; j < stroke_i.length; j++) {
			var diff = stroke_i[j][0] - xc;
			sum += (diff * diff);
		}
	}
	return sum;
};

KanjiCanvas.mu02 = function (pattern, yc) {
	var sum = 0;
	for (var i = 0; i < pattern.length; i++) {
		var stroke_i = pattern[i];
		for (var j = 0; j < stroke_i.length; j++) {
			var diff = stroke_i[j][1] - yc;
			sum += (diff * diff);
		}
	}
	return sum;
};

KanjiCanvas.aran = function (width, height) {

	var r1 = 0.;
	if (height > width) {
		r1 = width / height;
	} else {
		r1 = height / width;
	}

	var a = Math.PI / 2.;
	var b = a * r1;
	var b1 = Math.sin(b);
	var c = Math.sqrt(b1);
	var d = c;

	var r2 = Math.sqrt(Math.sin((Math.PI / 2.) * r1));
	return r2;
};

KanjiCanvas.chopOverbounds = function (pattern) {

	var chopped = new Array();
	for (var i = 0; i < pattern.length; i++) {
		var stroke_i = pattern[i];
		var c_stroke_i = new Array();
		for (var j = 0; j < stroke_i.length; j++) {
			var x = stroke_i[j][0];
			var y = stroke_i[j][1];
			if (x < 0) { x = 0; }
			if (x >= 256) { x = 255; }
			if (y < 0) { y = 0; }
			if (y >= 256) { y = 255; }
			c_stroke_i.push([x, y]);
		}
		chopped.push(c_stroke_i);
	}
	return chopped;
};

KanjiCanvas.transform = function (pattern, x_, y_) {
	var pt = new Array();
	for (var i = 0; i < pattern.length; i++) {
		var stroke_i = pattern[i];
		var c_stroke_i = new Array();
		for (var j = 0; j < stroke_i.length; j++) {
			var x = stroke_i[j][0] + x_;
			var y = stroke_i[j][1] + y_;
			c_stroke_i.push([x, y]);
		}
		pt.push(c_stroke_i);
	}
	return pt;
};

// main function for moment normalization
KanjiCanvas.momentNormalize = function (id) {

	KanjiCanvas.newHeight = 256;
	KanjiCanvas.newWidth = 256;
	KanjiCanvas.xMin = 256;
	KanjiCanvas.xMax = 0;
	KanjiCanvas.yMin = 256;
	KanjiCanvas.yMax = 0;
	// first determine drawn character width / length
	for (var i = 0; i < KanjiCanvas["recordedPattern_" + id].length; i++) {
		var stroke_i = KanjiCanvas["recordedPattern_" + id][i];
		for (var j = 0; j < stroke_i.length; j++) {
			KanjiCanvas.x = stroke_i[j][0];
			KanjiCanvas.y = stroke_i[j][1];
			if (KanjiCanvas.x < KanjiCanvas.xMin) {
				KanjiCanvas.xMin = KanjiCanvas.x;
			}
			if (KanjiCanvas.x > KanjiCanvas.xMax) {
				KanjiCanvas.xMax = KanjiCanvas.x;
			}
			if (KanjiCanvas.y < KanjiCanvas.yMin) {
				KanjiCanvas.yMin = KanjiCanvas.y;
			}
			if (KanjiCanvas.y > KanjiCanvas.yMax) {
				KanjiCanvas.yMax = KanjiCanvas.y;
			}
		}
	}
	KanjiCanvas.oldHeight = Math.abs(KanjiCanvas.yMax - KanjiCanvas.yMin);
	KanjiCanvas.oldWidth = Math.abs(KanjiCanvas.xMax - KanjiCanvas.xMin);

	var r2 = KanjiCanvas.aran(KanjiCanvas.oldWidth, KanjiCanvas.oldHeight);

	var aranWidth = KanjiCanvas.newWidth;
	var aranHeight = KanjiCanvas.newHeight;

	if (KanjiCanvas.oldHeight > KanjiCanvas.oldWidth) {
		aranWidth = r2 * KanjiCanvas.newWidth;
	} else {
		aranHeight = r2 * KanjiCanvas.newHeight;
	}

	var xOffset = (KanjiCanvas.newWidth - aranWidth) / 2;
	var yOffset = (KanjiCanvas.newHeight - aranHeight) / 2;

	var m00_ = KanjiCanvas.m00(KanjiCanvas["recordedPattern_" + id]);
	var m01_ = KanjiCanvas.m01(KanjiCanvas["recordedPattern_" + id]);
	var m10_ = KanjiCanvas.m10(KanjiCanvas["recordedPattern_" + id]);

	var xc_ = (m10_ / m00_);
	var yc_ = (m01_ / m00_);

	var xc_half = aranWidth / 2;
	var yc_half = aranHeight / 2;

	var mu20_ = KanjiCanvas.mu20(KanjiCanvas["recordedPattern_" + id], xc_);
	var mu02_ = KanjiCanvas.mu02(KanjiCanvas["recordedPattern_" + id], yc_);

	var alpha = (aranWidth) / (4 * Math.sqrt(mu20_ / m00_)) || 0;
	var beta = (aranHeight) / (4 * Math.sqrt(mu02_ / m00_)) || 0;

	var nf = new Array();
	for (var i = 0; i < KanjiCanvas["recordedPattern_" + id].length; i++) {
		var si = KanjiCanvas["recordedPattern_" + id][i];
		var nsi = new Array();
		for (var j = 0; j < si.length; j++) {

			var newX = (alpha * (si[j][0] - xc_) + xc_half);
			var newY = (beta * (si[j][1] - yc_) + yc_half);

			nsi.push([newX, newY]);
		}
		nf.push(nsi);
	}

	return KanjiCanvas.transform(nf, xOffset, yOffset);
};

// distance functions
KanjiCanvas.euclid = function (x1y1, x2y2) {
	var a = x1y1[0] - x2y2[0];
	var b = x1y1[1] - x2y2[1];
	var c = Math.sqrt(a * a + b * b);
	return c;
};

// extract points in regular intervals
KanjiCanvas.extractFeatures = function (kanji, interval) {
	var extractedPattern = new Array();
	var nrStrokes = kanji.length;
	for (var i = 0; i < nrStrokes; i++) {
		var stroke_i = kanji[i];
		var extractedStroke_i = new Array();
		var dist = 0.0;
		var j = 0;
		while (j < stroke_i.length) {
			// always add first point
			if (j == 0) {
				var x1y1 = stroke_i[0];
				extractedStroke_i.push(x1y1);
			}
			if (j > 0) {
				var x1y1 = stroke_i[j - 1];
				var x2y2 = stroke_i[j];
				dist += KanjiCanvas.euclid(x1y1, x2y2);
			}
			if ((dist >= interval) && (j > 1)) {
				dist = dist - interval;
				var x1y1 = stroke_i[j];
				extractedStroke_i.push(x1y1);
			}
			j++;
		}
		// if we so far have only one point, always add last point
		if (extractedStroke_i.length == 1) {
			var x1y1 = stroke_i[stroke_i.length - 1];
			extractedStroke_i.push(x1y1);
		} else {
			if (dist > (0.75 * interval)) {
				var x1y1 = stroke_i[stroke_i.length - 1];
				extractedStroke_i.push(x1y1);
			}
		}
		extractedPattern.push(extractedStroke_i);
	}
	return extractedPattern;
};

/* test extraction function
KanjiCanvas.extractTest = function () {
   //var ex = KanjiCanvas.extractFeatures(KanjiCanvas["recordedPattern_" + id], 20.);
   //KanjiCanvas["recordedPattern_" + id] = ex;

   //KanjiCanvas.redraw(id);
   
   var norm = normalizeLinearTest(test4);
   var ex = KanjiCanvas.extractFeatures(norm, 20.);
   //console.log(ex);
   
}*/

KanjiCanvas.endPointDistance = function (pattern1, pattern2) {
	var dist = 0;
	var l1 = typeof pattern1 == 'undefined' ? 0 : pattern1.length;
	var l2 = typeof pattern2 == 'undefined' ? 0 : pattern2.length;
	if (l1 == 0 || l2 == 0) {
		return 0;
	} else {
		var x1y1 = pattern1[0];
		var x2y2 = pattern2[0];
		dist += (Math.abs(x1y1[0] - x2y2[0]) + Math.abs(x1y1[1] - x2y2[1]));
		x1y1 = pattern1[l1 - 1];
		x2y2 = pattern2[l2 - 1];
		dist += (Math.abs(x1y1[0] - x2y2[0]) + Math.abs(x1y1[1] - x2y2[1]));
	}
	return dist;
};

KanjiCanvas.initialDistance = function (pattern1, pattern2) {
	var l1 = pattern1.length;
	var l2 = pattern2.length;
	var lmin = Math.min(l1, l2);
	var lmax = Math.max(l1, l2);
	var dist = 0;
	for (var i = 0; i < lmin; i++) {
		var x1y1 = pattern1[i];
		var x2y2 = pattern2[i];
		dist += (Math.abs(x1y1[0] - x2y2[0]) + Math.abs(x1y1[1] - x2y2[1]));
	}
	return dist * (lmax / lmin);
};

// given to pattern, determine longer (more strokes)
// and return quadruple with sorted patterns and their
// stroke numbers [k1,k2,n,m] where n >= m and 
// they denote the #of strokes of k1 and k2
KanjiCanvas.getLargerAndSize = function (pattern1, pattern2) {
	var l1 = typeof pattern1 == 'undefined' ? 0 : pattern1.length;
	var l2 = typeof pattern2 == 'undefined' ? 0 : pattern2.length;
	// definitions as in paper 
	// i.e. n is larger 
	var n = l1;
	var m = l2;
	var k1 = pattern1;
	var k2 = pattern2;
	if (l1 < l2) {
		m = l1;
		n = l2;
		k1 = pattern2;
		k2 = pattern1;
	}
	return [k1, k2, n, m];
};

KanjiCanvas.wholeWholeDistance = function (pattern1, pattern2) {
	// [k1, k2, n, m]
	// a[0], a[1], a[2], a[3]
	var a = KanjiCanvas.getLargerAndSize(pattern1, pattern2);
	var dist = 0;
	for (var i = 0; i < a[3]; i++) {
		KanjiCanvas.j_of_i = parseInt(parseInt(a[2] / a[3]) * i);
		var x1y1 = a[0][KanjiCanvas.j_of_i];
		var x2y2 = a[1][i];
		dist += (Math.abs(x1y1[0] - x2y2[0]) + Math.abs(x1y1[1] - x2y2[1]));
	}
	return parseInt(dist / a[3]);
};

// initialize N-stroke map by greedy initialization
KanjiCanvas.initStrokeMap = function (pattern1, pattern2, distanceMetric) {
	// [k1, k2, n, m]
	// a[0], a[1], a[2], a[3]
	var a = KanjiCanvas.getLargerAndSize(pattern1, pattern2);
	// larger is now k1 with length n
	var map = new Array();
	for (var i = 0; i < a[2]; i++) {
		map[i] = -1;
	}
	var free = new Array();
	for (var i = 0; i < a[2]; i++) {
		free[i] = true;
	}
	for (var i = 0; i < a[3]; i++) {
		KanjiCanvas.minDist = 10000000;
		KanjiCanvas.min_j = -1;
		for (var j = 0; j < a[2]; j++) {
			if (free[j] == true) {
				var d = distanceMetric(a[0][j], a[1][i]);
				if (d < KanjiCanvas.minDist) {
					KanjiCanvas.minDist = d;
					KanjiCanvas.min_j = j;
				}
			}
		}
		free[KanjiCanvas.min_j] = false;
		map[KanjiCanvas.min_j] = i;
	}
	return map;
};

// get best N-stroke map by iterative improvement
KanjiCanvas.getMap = function (pattern1, pattern2, distanceMetric) {
	// [k1, k2, n, m]
	// a[0], a[1], a[2], a[3]
	var a = KanjiCanvas.getLargerAndSize(pattern1, pattern2);
	// larger is now k1 with length n
	var L = 3;
	var map = KanjiCanvas.initStrokeMap(a[0], a[1], distanceMetric);
	for (var l = 0; l < L; l++) {
		for (var i = 0; i < map.length; i++) {
			if (map[i] != -1) {
				KanjiCanvas.dii = distanceMetric(a[0][i], a[1][map[i]]);
				for (var j = 0; j < map.length; j++) {
					// we need to check again, since 
					// manipulation of map[i] can occur within
					// the j-loop
					if (map[i] != -1) {
						if (map[j] != -1) {
							var djj = distanceMetric(a[0][j], a[1][map[j]]);
							var dij = distanceMetric(a[0][j], a[1][map[i]]);
							var dji = distanceMetric(a[0][i], a[1][map[j]]);
							if (dji + dij < KanjiCanvas.dii + djj) {
								var mapj = map[j];
								map[j] = map[i];
								map[i] = mapj;
								KanjiCanvas.dii = dij;
							}
						} else {
							var dij = distanceMetric(a[0][j], a[1][map[i]]);
							if (dij < KanjiCanvas.dii) {
								map[j] = map[i];
								map[i] = -1;
								KanjiCanvas.dii = dij;
							}
						}
					}
				}
			}
		}
	}
	return map;
};

// from optimal N-stroke map create M-N stroke map
KanjiCanvas.completeMap = function (pattern1, pattern2, distanceMetric, map) {
	// [k1, k2, _, _]
	// a[0], a[1], a[2], a[3]
	var a = KanjiCanvas.getLargerAndSize(pattern1, pattern2);
	if (!map.includes(-1)) {
		return map;
	}
	// complete at the end
	var lastUnassigned = map[map.length];
	var mapLastTo = -1;
	for (var i = map.length - 1; i >= 0; i--) {
		if (map[i] == -1) {
			lastUnassigned = i;
		} else {
			mapLastTo = map[i];
			break;
		}
	}
	for (var i = lastUnassigned; i < map.length; i++) {
		map[i] = mapLastTo;
	}
	// complete at the beginning
	var firstUnassigned = -1;
	var mapFirstTo = -1;
	for (var i = 0; i < map.length; i++) {
		if (map[i] == -1) {
			firstUnassigned = i;
		} else {
			mapFirstTo = map[i];
			break;
		}
	}
	for (var i = 0; i <= firstUnassigned; i++) {
		map[i] = mapFirstTo;
	}
	// for the remaining unassigned, check
	// where to "split"
	for (var i = 0; i < map.length; i++) {
		if (i + 1 < map.length && map[i + 1] == -1) {
			// we have a situation like this:
			//   i       i+1   i+2   ...  i+n 
			//   start   -1    ?     -1   stop
			var start = i;

			var stop = i + 1;
			while (stop < map.length && map[stop] == -1) {
				stop++;
			}

			var div = start;
			var max_dist = 1000000;
			for (var j = start; j < stop; j++) {
				var stroke_ab = a[0][start];
				// iteration of concat, possibly slow
				// due to memory allocations; optimize?!
				for (var temp = start + 1; temp <= j; temp++) {
					stroke_ab = stroke_ab.concat(a[0][temp]);
				}
				var stroke_bc = a[0][j + 1];

				for (var temp = j + 2; temp <= stop; temp++) {
					stroke_bc = stroke_bc.concat(a[0][temp]);
				}

				var d_ab = distanceMetric(stroke_ab, a[1][map[start]]);
				var d_bc = distanceMetric(stroke_bc, a[1][map[stop]]);
				if (d_ab + d_bc < max_dist) {
					div = j;
					max_dist = d_ab + d_bc;
				}
			}
			for (var j = start; j <= div; j++) {
				map[j] = map[start];
			}
			for (var j = div + 1; j < stop; j++) {
				map[j] = map[stop];
			}
		}
	}
	return map;
};

// given two patterns, M-N stroke map and distanceMetric function,
// compute overall distance between two patterns
KanjiCanvas.computeDistance = function (pattern1, pattern2, distanceMetric, map) {
	// [k1, k2, n, m]
	// a[0], a[1], a[2], a[3]
	var a = KanjiCanvas.getLargerAndSize(pattern1, pattern2);
	var dist = 0.0;
	var idx = 0;
	while (idx < a[2]) {
		var stroke_idx = a[1][map[idx]];
		var start = idx;
		var stop = start + 1;
		while (stop < map.length && map[stop] == map[idx]) {
			stop++;
		}
		var stroke_concat = a[0][start];
		for (var temp = start + 1; temp < stop; temp++) {
			stroke_concat = stroke_concat.concat(a[0][temp]);
		}
		dist += distanceMetric(stroke_idx, stroke_concat);
		idx = stop;
	}
	return dist;
};

// given two patterns, M-N strokemap, compute weighted (respect stroke
// length when there are concatenated strokes using the wholeWhole distance
KanjiCanvas.computeWholeDistanceWeighted = function (pattern1, pattern2, map) {
	// [k1, k2, n, m]
	// a[0], a[1], a[2], a[3]
	var a = KanjiCanvas.getLargerAndSize(pattern1, pattern2);
	var dist = 0.0;
	var idx = 0;
	while (idx < a[2]) {
		var stroke_idx = a[1][map[idx]];
		var start = idx;
		var stop = start + 1;
		while (stop < map.length && map[stop] == map[idx]) {
			stop++;
		}
		var stroke_concat = a[0][start];
		for (var temp = start + 1; temp < stop; temp++) {
			stroke_concat = stroke_concat.concat(a[0][temp]);
		}

		var dist_idx = KanjiCanvas.wholeWholeDistance(stroke_idx, stroke_concat);
		if (stop > start + 1) {
			// concatenated stroke, adjust weight
			var mm = typeof stroke_idx == 'undefined' ? 0 : stroke_idx.length;
			var nn = stroke_concat.length;
			if (nn < mm) {
				var temp = nn;
				nn = mm;
				mm = temp;
			}
			dist_idx = dist_idx * (nn / mm);
		}
		dist += dist_idx;
		idx = stop;
	}
	return dist;
};

// apply coarse classficiation w.r.t. inputPattern
// considering _all_ referencePatterns using endpoint distance
KanjiCanvas.coarseClassification = function (inputPattern) {
	var inputLength = inputPattern.length;
	var candidates = [];
	for (var i = 0; i < KanjiCanvas.refPatterns.length; i++) {
		var iLength = KanjiCanvas.refPatterns[i][1];
		if (inputLength < iLength + 2 && inputLength > iLength - 3) {
			var iPattern = KanjiCanvas.refPatterns[i][2];
			var iMap = KanjiCanvas.getMap(iPattern, inputPattern, KanjiCanvas.endPointDistance);
			iMap = KanjiCanvas.completeMap(iPattern, inputPattern, KanjiCanvas.endPointDistance, iMap);
			var dist = KanjiCanvas.computeDistance(iPattern, inputPattern, KanjiCanvas.endPointDistance, iMap);
			var m = iLength;
			var n = iPattern.length;
			if (n < m) {
				var temp = n;
				n = m;
				m = temp;
			}
			candidates.push([i, (dist * (m / n))]);
		}
	}
	candidates.sort(function (a, b) { return a[1] - b[1] });
	/*
	var outStr = "";
	for(var i=0;i<candidates.length;i++) {
		outStr += candidates[i][0];
		outStr += " ";
		outStr += candidates[i][1];
		outStr += KanjiCanvas.refPatterns[candidates[i][0]][0];
		outStr += "|";	   
	}	   
	document.getElementById("coarseCandidateList").innerHTML = outStr;
	*/
	return candidates;
};

// fine classfication. returns best 100 matches for inputPattern
// and candidate list (which should be provided by coarse classification
KanjiCanvas.fineClassification = function (inputPattern, inputCandidates) {
	var inputLength = inputPattern.length;
	var candidates = [];
	for (var i = 0; i < Math.min(inputCandidates.length, 100); i++) {
		var j = inputCandidates[i][0];
		var iLength = KanjiCanvas.refPatterns[j][1];
		var iPattern = KanjiCanvas.refPatterns[j][2];
		if (inputLength < iLength + 2 && inputLength > iLength - 3) {

			var iMap = KanjiCanvas.getMap(iPattern, inputPattern, KanjiCanvas.initialDistance);

			iMap = KanjiCanvas.completeMap(iPattern, inputPattern, KanjiCanvas.wholeWholeDistance, iMap);
			if (KanjiCanvas.refPatterns[j][0] == "委") {
				console.log("finished imap, fine:");
				console.log(iMap);
				console.log("weight:")
				console.log(KanjiCanvas.computeDistance(iPattern, inputPattern, KanjiCanvas.wholeWholeDistance, iMap));
				console.log("weight intended:")
				console.log(KanjiCanvas.computeDistance(iPattern, inputPattern, KanjiCanvas.wholeWholeDistance, [0, 1, 2, 3, 4, 7, 5, 6]));
			}
			var dist = KanjiCanvas.computeWholeDistanceWeighted(iPattern, inputPattern, iMap);
			var n = inputLength;
			var m = iPattern.length;
			if (m > n) {
				m = n;
			}
			dist = dist / m;
			candidates.push([j, dist]);
		}
	}
	candidates.sort(function (a, b) { return a[1] - b[1] });
	var outStr = "";
	for (var i = 0; i < Math.min(candidates.length, 10); i++) {
		//outStr += candidates[i][0];
		//outStr += " ";
		//outStr += candidates[i][1];
		outStr += KanjiCanvas.refPatterns[candidates[i][0]][0];
		outStr += "  ";
	}
	//document.getElementById("candidateList").innerHTML = outStr;

	return outStr;
};

/* test function for N-pair and M-N stroke map computation
 KanjiCanvas.testMap = function() {
  // var map = initStrokeMap(test_k21,test_k2,endPointDistance);
	// should give
	// 0  1  2 3 
	// 0 -1 -1 1  
  var map = getMap(test_k21,test_k2,endPointDistance);
	// should also give
	// 0  1  2 3 
	// 0 -1 -1 1  
  map = completeMap(test_k21,test_k2,endPointDistance, map);
	// should give
	// 0  1  2 3 
	// 0 0 1 1  
  console.log(map);	
  
  map = getMap(test_k22,test_k2,endPointDistance);
	// 0  1  2 3 
	// 0 -1 -1 1
  map = completeMap(test_k22,test_k2,endPointDistance, map);
   // 0 1 2 3 
	// 0 0 0 1  
  console.log(map);	
  
		  map = getMap(test_k23,test_k2,endPointDistance);
	// 0  1  2 3 
	// 0 -1 -1 1   
  map = completeMap(test_k23,test_k2,endPointDistance, map);
	// 0  1  2 3 
	// 0  1  1 1
  console.log(map);	
}
*/

KanjiCanvas.recognize = function (id) {
	var mn = KanjiCanvas.momentNormalize(id);

	var extractedFeatures = KanjiCanvas.extractFeatures(mn, 20.);

	var map = KanjiCanvas.getMap(extractedFeatures, KanjiCanvas.refPatterns[0][2], KanjiCanvas.endPointDistance);
	map = KanjiCanvas.completeMap(extractedFeatures, KanjiCanvas.refPatterns[0][2], KanjiCanvas.endPointDistance, map);

	var candidates = KanjiCanvas.coarseClassification(extractedFeatures);

	KanjiCanvas.redraw(id);

	// display candidates in the specified element
	if (KanjiCanvas["canvas_" + id].dataset.candidateList) {
		document.getElementById(KanjiCanvas["canvas_" + id].dataset.candidateList).innerHTML = KanjiCanvas.fineClassification(extractedFeatures, candidates);
	}

	// otherwise log the result to the console if no candidateList is specified
	else {
		return KanjiCanvas.fineClassification(extractedFeatures, candidates);
	}
};

KanjiCanvas.momentNormalizeFromPattern = function (pattern) {
    const newHeight = 256;
    const newWidth = 256;
    let xMin = 256, xMax = 0, yMin = 256, yMax = 0;

    // Find bounds
    for (let i = 0; i < pattern.length; i++) {
        const stroke = pattern[i];
        for (let j = 0; j < stroke.length; j++) {
            const x = stroke[j][0];
            const y = stroke[j][1];
            if (x < xMin) xMin = x;
            if (x > xMax) xMax = x;
            if (y < yMin) yMin = y;
            if (y > yMax) yMax = y;
        }
    }
    const oldHeight = Math.abs(yMax - yMin);
    const oldWidth = Math.abs(xMax - xMin);

    // Aspect ratio normalization
    const r2 = KanjiCanvas.aran(oldWidth, oldHeight);
    let aranWidth = newWidth;
    let aranHeight = newHeight;
    if (oldHeight > oldWidth) {
        aranWidth = r2 * newWidth;
    } else {
        aranHeight = r2 * newHeight;
    }
    const xOffset = (newWidth - aranWidth) / 2;
    const yOffset = (newHeight - aranHeight) / 2;

    // Moments
    const m00 = KanjiCanvas.m00(pattern);
    const m01 = KanjiCanvas.m01(pattern);
    const m10 = KanjiCanvas.m10(pattern);
    const xc = (m10 / m00);
    const yc = (m01 / m00);
    const xc_half = aranWidth / 2;
    const yc_half = aranHeight / 2;
    const mu20 = KanjiCanvas.mu20(pattern, xc);
    const mu02 = KanjiCanvas.mu02(pattern, yc);
    const alpha = (aranWidth) / (4 * Math.sqrt(mu20 / m00)) || 0;
    const beta = (aranHeight) / (4 * Math.sqrt(mu02 / m00)) || 0;

    // Transform
    const nf = [];
    for (let i = 0; i < pattern.length; i++) {
        const si = pattern[i];
        const nsi = [];
        for (let j = 0; j < si.length; j++) {
            const newX = (alpha * (si[j][0] - xc) + xc_half);
            const newY = (beta * (si[j][1] - yc) + yc_half);
            nsi.push([newX, newY]);
        }
        nf.push(nsi);
    }
    return KanjiCanvas.transform(nf, xOffset, yOffset);
};

KanjiCanvas.recognizePattern = function (pattern) {
    const mn = KanjiCanvas.momentNormalizeFromPattern(pattern);
    const extractedFeatures = KanjiCanvas.extractFeatures(mn, 20.);
    const candidates = KanjiCanvas.coarseClassification(extractedFeatures);
    return KanjiCanvas.fineClassification(extractedFeatures, candidates);
};

export default KanjiCanvas;